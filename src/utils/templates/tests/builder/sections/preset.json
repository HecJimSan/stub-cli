{
  "dataname": "{rootFile}-{method}.json",
  "filename": "{rootFile}-{method}.test.js",
  "assert": "      .end((err, res) => {",
  "noErrors": "          expect(err).to.not.exist;",
  "status": "          expect(res.status).to.equal({status});",
  "body": "          expect(res.body).to.deep.equal({\n            'dummyResponse': 'dummyResponse'\n \n          });",
  "bodyG": "          expect(res.body).to.deep.equal({\n            {bodyKey}: {bodyVal}\n          });",
  "bodyKey": "'body'",
  "bodyVal": "'To be defined'",
  "bodyGXml": "          expect(res.get('Content-Type')).to.equal('text/xml; charset=utf-8');\n          expect(res.text).to.equal('<xml><tbd>Xml response to be defined</tbd></xml>');",
  "emptyBody": "          expect(res.body).to.be.empty;",
  "endAssert": "          done();\n      });",
  "bodyReq": "      .send({'dummy': 'dummy'})",
  "bodyReqXml": "      .set('Accept', 'text/xml; charset=utf-8')\n      .type('application/xml')\n      .send('<xml><tbd>Xml request to be defined</tbd></xml>')",
  "cookies": "      .set('Cookie', [{cookies}])",
  "describe": "describe('{method} - {path} ', () => {",
  "endDes": "});",
  "headers": "      .set({{headers}})",
  "it": "  it('should exist', (done) => {",
  "endIt": "  });",
  "endItDelay": "  }).timeout({delay});",
  "request": "    request(app)",
  "libraries": "'use strict';\n    \nvar app = require('@hectorjs/stub-backend');\nvar chai = require('chai');\nvar request = require('supertest');\n    \nvar expect = chai.expect;\n",
  "method": "      .{method}('{path}')"
}
